--source include/have_binlog_format_row.inc

call mtr.add_suppression("Unsafe statement written to the binary log");

--disable_warnings
drop table if exists t1,t2;
--enable_warnings

create table t1 (a int auto_increment , primary key (a));
insert into t1 values (NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL),(NULL);

call dbms_trans.returning("a", "update t1 set a=a+10 where a > 34");

call dbms_trans.returning("*", "update t1 set a=a+100 where a=1 and a=2");

--error ER_BAD_FIELD_ERROR
call dbms_trans.returning("*", "update t1 set a=b+100 where a=1 and a=2");

--error ER_BAD_FIELD_ERROR
call dbms_trans.returning("*", "update t1 set a=b+100 where c=1 and a=2");

--error ER_BAD_FIELD_ERROR
call dbms_trans.returning("*", "update t1 set d=a+100 where a=1");

drop table t1;

CREATE TABLE t1
 (
 place_id int (10) unsigned NOT NULL,
 shows int(10) unsigned DEFAULT '0' NOT NULL,
 ishows int(10) unsigned DEFAULT '0' NOT NULL,
 ushows int(10) unsigned DEFAULT '0' NOT NULL,
 clicks int(10) unsigned DEFAULT '0' NOT NULL,
 iclicks int(10) unsigned DEFAULT '0' NOT NULL,
 uclicks int(10) unsigned DEFAULT '0' NOT NULL,
 ts timestamp,
 PRIMARY KEY (place_id,ts)
 );

INSERT INTO t1 (place_id,shows,ishows,ushows,clicks,iclicks,uclicks,ts)
VALUES (1,0,0,0,0,0,0,20000928174434);
call dbms_trans.returning("place_id, shows ", "UPDATE t1 SET
                          shows=shows+1,ishows=ishows+1,ushows=ushows+1,clicks=clicks+1,iclicks=iclicks+1,uclicks=uclicks+1
                          WHERE place_id=1 AND ts>='2000-09-28 00:00:00'");
select place_id,shows from t1;
drop table t1;

CREATE TABLE t1 (
  lfdnr int(10) unsigned NOT NULL default '0',
  ticket int(10) unsigned NOT NULL default '0',
  client varchar(255) NOT NULL default '',
  replyto varchar(255) NOT NULL default '',
  subject varchar(100) NOT NULL default '',
  timestamp int(10) unsigned NOT NULL default '0',
  tstamp timestamp NOT NULL,
  status int(3) NOT NULL default '0',
  type varchar(15) NOT NULL default '',
  assignment int(10) unsigned NOT NULL default '0',
  fupcount int(4) unsigned NOT NULL default '0',
  parent int(10) unsigned NOT NULL default '0',
  activity int(10) unsigned NOT NULL default '0',
  priority tinyint(1) unsigned NOT NULL default '1',
  cc varchar(255) NOT NULL default '',
  bcc varchar(255) NOT NULL default '',
  body text NOT NULL,
  comment text,
  header text,
  PRIMARY KEY  (lfdnr),
  KEY k1 (timestamp),
  KEY k2 (type),
  KEY k3 (parent),
  KEY k4 (assignment),
  KEY ticket (ticket)
) ENGINE=MyISAM;

INSERT INTO t1 VALUES (773,773,'','','',980257344,20010318180652,0,'Open',10,0,0,0,1,'','','','','');

alter table t1 change lfdnr lfdnr int(10) unsigned not null auto_increment;
call dbms_trans.returning("status,type", "update t1 set status=1 where
                          type='Open'");
select status from t1;
drop table t1;

#
# Test of ORDER BY
#
create table t1 (a int not null, b int not null, key (a));
insert into t1 values (1,1),(1,2),(1,3),(3,1),(3,2),(3,3),(3,1),(3,2),(3,3),(2,1),(2,2),(2,3);
SET @tmp=0;
call dbms_trans.returning("a, b", "update t1 set b=(@tmp:=@tmp+1) order by a");

call dbms_trans.returning("*",  "update t1 set b=99 where a=1 order by b asc limit 1");

select * from t1 order by a,b;

call dbms_trans.returning("a, b",  "update t1 set b=100 where a=1 order by b
                          desc limit 2");
call dbms_trans.returning("*", "update t1 set a=a+10+b where a=1 order by b");

select * from t1 order by a,b;
create table t2 (a int not null, b int not null);
insert into t2 values (1,1),(1,2),(1,3);

call dbms_trans.returning("*" , "update t1 set b=(select distinct 1 from (select
* from t2) a)");

drop table t1,t2;


#
# Test with limit (Bug #393)
#
CREATE TABLE t1 (
   `id_param` smallint(3) unsigned NOT NULL default '0',
   `nom_option` char(40) NOT NULL default '',
   `valid` tinyint(1) NOT NULL default '0',
   KEY `id_param` (`id_param`,`nom_option`)
 ) ENGINE=MyISAM;

INSERT INTO t1 (id_param,nom_option,valid) VALUES (185,'600x1200',1);

call dbms_trans.returning("*",  "UPDATE t1 SET nom_option='test' WHERE
                          id_param=185 AND nom_option='600x1200' AND valid=1
                          LIMIT 1");
select * from t1;
drop table t1;


#
# Bug #8057
#
create table t1 (id int not null auto_increment primary key, id_str varchar(32));
insert into t1 (id_str) values ("test");
call dbms_trans.returning("id, id_str",  "update t1 set id_str = concat(id_str,
     id) where id = last_insert_id()");
select * from t1;
drop table t1;


#
# Bug #8942: a problem with update and partial key part
#
create table t1 (a int, b char(255), key(a, b(20)));
insert into t1 values (0, '1');
call dbms_trans.returning("a, b",  "update t1 set b = b + 1 where a = 0");
select * from t1;
drop table t1;



#
# Bug #13180 sometimes server accepts sum func in update/delete where condition
#
create table t1(f1 int);
select DATABASE();
--error 1111
update t1 set f1=1 where count(*)=1;
select DATABASE();
--error 1111
delete from t1 where count(*)=1;
drop table t1;


# BUG#12915: Optimize "DELETE|UPDATE ... ORDER BY ... LIMIT n" to use an index
create table t1 ( a int, b int default 0, index (a) );
insert into t1 (a) values (0),(0),(0),(0),(0),(0),(0),(0);

flush status;
select a from t1 order by a limit 1;

flush status;
call dbms_trans.returning("*",  "update t1 set a=9999 order by a limit 1");
call dbms_trans.returning("*",  "update t1 set b=9999 order by a limit 1");

flush status;
delete from t1 order by a limit 1;

flush status;
delete from t1 order by a desc limit 1;

alter table t1 disable keys;

flush status;
delete from t1 order by a limit 1;

select * from t1;
call dbms_trans.returning( "*",  "update t1 set a=a+10,b=1 order by a limit 3");
call dbms_trans.returning( "*",  "update t1 set a=a+11,b=2 order by a limit 3");
call dbms_trans.returning( "*",  "update t1 set a=a+12,b=3 order by a limit 3");
select * from t1 order by a;

drop table t1;



#
# Bug#14186 select datefield is null not updated
#
create table t1 (f1 date not null);
insert into t1 values('2000-01-01'),('2000-01-01');
call dbms_trans.returning("f1", "update t1 set f1='2002-02-02' where f1 is
                          null");
select * from t1;
drop table t1;

# BUG#15935
create table t1 (a int);
insert into t1 values (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
create table t2 (a int, filler1 char(200), filler2 char(200), key(a));
insert into t2 select A.a + 10*B.a, 'filler','filler' from t1 A, t1 B;
flush status;
call dbms_trans.returning("*",  "update t2 set a=3 where a=2");
drop table t1, t2;

#
# Bug #16510 Updating field named like '*name' caused server crash
#
create table t1(f1 int, `*f2` int);
insert into t1 values (1,1);
call dbms_trans.returning("*f2", "update t1 set `*f2`=1");
drop table t1;

#
# Bug#25126: Wrongly resolved field leads to a crash
#
create table t1(f1 int);
--error 1054
call dbms_trans.returning("f2",  "update t1 set f2=1 order by f2");
drop table t1;
# End of 4.1 tests



#
# Bug #24035: performance degradation with condition int_field=big_decimal
#
CREATE TABLE t1 (
  request_id int unsigned NOT NULL auto_increment,
  user_id varchar(12) default NULL,
  time_stamp datetime NOT NULL default '2000-01-01 00:00:01',
  ip_address varchar(15) default NULL,
  PRIMARY KEY (request_id),
  KEY user_id_2 (user_id,time_stamp)
);

INSERT INTO t1 (user_id) VALUES ('user1');
INSERT INTO t1(user_id) SELECT user_id FROM t1;
INSERT INTO t1(user_id) SELECT user_id FROM t1;
INSERT INTO t1(user_id) SELECT user_id FROM t1;
INSERT INTO t1(user_id) SELECT user_id FROM t1;
INSERT INTO t1(user_id) SELECT user_id FROM t1;
INSERT INTO t1(user_id) SELECT user_id FROM t1;
INSERT INTO t1(user_id) SELECT user_id FROM t1;
INSERT INTO t1(user_id) SELECT user_id FROM t1;

flush status;
SELECT user_id FROM t1 WHERE request_id=9999999999999;
SELECT user_id FROM t1 WHERE request_id=999999999999999999999999999999;
call dbms_trans.returning("*",  "UPDATE t1 SET user_id=null WHERE
                          request_id=9999999999999");
 call dbms_trans.returning("*",  "UPDATE t1 SET user_id=null WHERE
                           request_id=999999999999999999999999999999");

DROP TABLE t1;



#
# Bug #40745: Error during WHERE clause calculation in UPDATE
#             leads to an assertion failure
#
--disable_warnings
DROP TABLE IF EXISTS t1;
DROP FUNCTION IF EXISTS f1;
--enable_warnings

CREATE FUNCTION f1() RETURNS INT RETURN f1();
CREATE TABLE t1 (i INT);
INSERT INTO t1 VALUES (1);

--error ER_SP_NO_RECURSION
call dbms_trans.returning("*", "UPDATE t1 SET i = 3 WHERE f1()");
--error ER_SP_NO_RECURSION
call dbms_trans.returning("*", "UPDATE t1 SET i = f1()");

DROP TABLE t1;
DROP FUNCTION f1;

--echo End of 5.0 tests


--echo # Multitable-view update is not allowed in SELECT...FROM UPDATE
# we allowed here when use dbms_trans.returning().

CREATE TABLE t1 ( a INT, KEY( a ) );
INSERT INTO t1 VALUES (0), (1);
CREATE VIEW v1 AS SELECT t11.a, t12.a AS b FROM t1 t11, t1 t12;
--error ER_NOT_SUPPORT_RETURNING_CLAUSE
call dbms_trans.returning("*", "UPDATE IGNORE v1 SET a = 1");
DROP TABLE t1;
DROP VIEW v1;

--echo #
--echo # Bug#54734 assert in Diagnostics_area::set_ok_status
--echo #
--disable_warnings
DROP TABLE IF EXISTS t1, not_exists;
DROP FUNCTION IF EXISTS f1;
DROP VIEW IF EXISTS v1;
--enable_warnings

CREATE TABLE t1 (PRIMARY KEY(pk)) AS SELECT 1 AS pk;
CREATE FUNCTION f1() RETURNS INTEGER RETURN (SELECT 1 FROM not_exists);
CREATE VIEW v1 AS SELECT pk FROM t1 WHERE f1() = 13;
--error ER_VIEW_INVALID
call dbms_trans.returning("*", "UPDATE v1 SET pk = 7 WHERE pk > 0");

DROP VIEW v1;
DROP FUNCTION f1;
DROP TABLE t1;


--echo #
--echo # Testcase for SELECT...FROM UPDATE syntax
--echo #

--disable_warnings
drop table if exists t1;
drop table if exists t2;
--enable_warnings

create table t1(id int auto_increment primary key, a int)engine=innodb;
insert into t1(a) values(1),(2),(3),(4),(5),(6);
create table t2(id int auto_increment primary key, a int)engine=innodb;
insert into t2(a) values(1),(1),(3),(3),(5),(5);

# matched rows are returned
call dbms_trans.returning("*", "update t1 set a=id");

--error ER_NOT_SUPPORT_RETURNING_CLAUSE
call dbms_trans.returning("*", "update t1, t2 set t1.a=t2.a where t1.id=t2.id");

drop table t1;
drop table t2;
